image: shihuang214/openwrt_ubuntu:v1

stages:
  - build_r4s
  
build_r4s:
  stage: build_r4s
  tags: 
  - docker
  except:
  - tags
  before_script: 
    - apt-get update
    - DEBIAN_FRONTEND=noninteractive apt-get install -y tzdata
    - apt-get install -y ack antlr3 aria2 asciidoc autoconf automake autopoint binutils bison build-essential bzip2 ccache cmake cpio curl device-tree-compiler fastjar flex gawk gettext gcc-multilib g++-multilib git gperf haveged help2man intltool libc6-dev-i386 libelf-dev libglib2.0-dev libgmp3-dev libltdl-dev libmpc-dev libmpfr-dev libncurses5-dev libncursesw5-dev libreadline-dev libssl-dev libtool lrzsz mkisofs msmtp nano ninja-build p7zip p7zip-full patch pkgconf python2.7 python3 python3-pip libpython3-dev qemu-utils rsync scons squashfs-tools subversion swig texinfo uglifyjs upx-ucl unzip vim wget xmlto xxd zlib1g-dev
    # 获取最新lede数据
    - cd /builds/shihuang/routerbuild
    - git clone https://github.com/coolsnowwolf/lede.git
    ## 添加helloworld源
    #- cd /builds/shihuang/routerbuild/lede
    #- sed -i '$a\src-git helloworld https://github.com/fw876/helloworld' ./feeds.conf.default
    ## revert for build temp fix
    #- cd /builds/shihuang/routerbuild/lede
    #- git config --global user.email "CI@ci.com"
    #- git config --global user.name "ci"
    #- git revert 7df2cabf9acdab6b54626af095670b1f0b6f7ddf
    # 添加openclash
    - cd /builds/shihuang/routerbuild/lede
    - mkdir ./openclash && cd ./openclash
    #- cd /builds/shihuang/routerbuild/lede/openclash
    - git config --global user.email "CI@ci.com"
    - git config --global user.name "ci"
    - git clone --branch "dev" --single-branch https://github.com/vernesong/OpenClash.git
    #- wget https://github.com/vernesong/OpenClash/archive/refs/heads/dev.zip
    #- unzip dev.zip
    - cd /builds/shihuang/routerbuild/lede/openclash/OpenClash/luci-app-openclash/root/etc/openclash
    - mkdir ./core && cd ./core
    - TUN_VER=$(curl -s https://raw.githubusercontent.com/vernesong/OpenClash/core/dev/core_version | sed -n '2p')
    - curl -SsL -o ./tun.gz https://github.com/vernesong/OpenClash/raw/core/dev/premium/clash-linux-arm64-$TUN_VER.gz
    - gzip -d ./tun.gz
    - mv ./tun ./clash_tun
    - curl -SsL -o ./meta.tar.gz https://github.com/vernesong/OpenClash/raw/core/dev/meta/clash-linux-arm64.tar.gz
    - tar -zxf ./meta.tar.gz
    - mv ./clash ./clash_meta
    - curl -SsL -o ./dev.tar.gz https://github.com/vernesong/OpenClash/raw/core/dev/dev/clash-linux-arm64.tar.gz
    - tar -zxf ./dev.tar.gz
    - chmod +x ./clash*
    - rm -rf ./*.gz
    - mv /builds/shihuang/routerbuild/lede/openclash/OpenClash/luci-app-openclash /builds/shihuang/routerbuild/lede/package
    ## 添加adguardhome
    #- cd /builds/shihuang/routerbuild/lede
    #- mkdir adguard
    #- cd /builds/shihuang/routerbuild/lede/adguard
    #- wget https://github.com/kongfl888/luci-app-adguardhome/archive/refs/heads/master.zip
    #- unzip master.zip
    #- mv /builds/shihuang/routerbuild/lede/adguard/luci-app-adguardhome-master /builds/shihuang/routerbuild/lede/package/luci-app-adguardhome
    # 合并代码
    - cd /builds/shihuang/routerbuild/lede
    - ./scripts/feeds update -a
    - ./scripts/feeds install -a
    # 额外改动
    ## 参考：
    ## - https://github.com/msylgj/R2S-R4S-OpenWrt/blob/21.02/SCRIPTS/prepare_package.sh
    ## - https://github.com/klever1988/nanopi-openwrt/blob/master/scripts/patches.sh
    ## 修改默认wan的ip地址为192.168.2.1
    - sed -i 's/192.168.1.1/192.168.2.1/g' package/base-files/files/bin/config_generate
    ## 修改默认主题为argon（必须选择这个主题安装）
    - sed -i '/uci commit luci/i\uci set luci.main.mediaurlbase="/luci-static/argon"' `find package -type f -path '*/default-settings/files/zzz-default-settings'`

  script: |
    echo 'clean config'
    cd /builds/shihuang/routerbuild/lede
    rm -f ./.config*
    touch ./.config
    
    echo 'Custom configure file'
    #
    # ========================固件定制部分========================
    # 
    # 编译r4s固件:
    cat >> .config <<EOF
    CONFIG_TARGET_rockchip=y
    CONFIG_TARGET_rockchip_armv8=y
    CONFIG_TARGET_rockchip_armv8_DEVICE_friendlyarm_nanopi-r4s=y
    EOF
    # 部分配置修改：
    cat >> .config <<EOF
    CONFIG_TARGET_ROOTFS_TARGZ=y
    EOF
    # 常用LuCI插件和额外包选择:
    cat >> .config <<EOF
    CONFIG_PACKAGE_ipv6helper=y
    CONFIG_PACKAGE_autosamba=y
    CONFIG_PACKAGE_dnsmasq_full_dhcpv6=y
    CONFIG_PACKAGE_luci-app-diskman=y
    CONFIG_PACKAGE_luci-app-openclash=y
    CONFIG_PACKAGE_luci-app-uugamebooster=y
    CONFIG_PACKAGE_luci-app-wrtbwmon=y
    CONFIG_PACKAGE_ip6tables-extra=y
    CONFIG_PACKAGE_ip6tables-mod-nat=y
    CONFIG_PACKAGE_kmod-nft-tproxy=y
    EOF
    # LuCI主题:
    cat >> .config <<EOF
    CONFIG_PACKAGE_luci-theme-argon-mod=y
    EOF
    # 取消编译(不要删除被缩进的注释符号):
    cat >> .config <<EOF
    # CONFIG_PACKAGE_luci-app-cpufreq is not set
    # CONFIG_PACKAGE_luci-app-hd-idle is not set
    # CONFIG_PACKAGE_luci-app-ipsec-server is not set
    # CONFIG_PACKAGE_luci-app-openvpn-server is not set
    # CONFIG_PACKAGE_luci-app-pptp-server is not set
    # CONFIG_PACKAGE_luci-app-ramfree is not set
    # CONFIG_PACKAGE_luci-app-samba is not set
    # CONFIG_PACKAGE_luci-app-sqm is not set
    # CONFIG_PACKAGE_luci-app-ttyd is not set
    # CONFIG_PACKAGE_luci-app-usb-printer is not set
    # CONFIG_PACKAGE_luci-app-wireguard is not set
    # CONFIG_PACKAGE_luci-app-accesscontrol is not set
    # CONFIG_PACKAGE_luci-app-adbyby-plus is not set
    # CONFIG_PACKAGE_luci-app-ddns is not set
    # CONFIG_PACKAGE_luci-app-ipsec-vpnd is not set
    # CONFIG_PACKAGE_luci-app-unblockmusic is not set
    # CONFIG_UnblockNeteaseMusic_Go is not set
    # CONFIG_PACKAGE_luci-app-vlmcsd is not set
    # CONFIG_PACKAGE_luci-app-wol is not set
    # CONFIG_PACKAGE_luci-app-zerotier is not set
    # CONFIG_PACKAGE_luci-app-ssr-plus is not set
    EOF
    # 
    # ========================固件定制部分结束========================
    # 
    
    echo 'Generate configuration file'
    # 对比配置文件：
    cd /builds/shihuang/routerbuild/lede
    sed -i 's/^[ \t]*//g' ./.config
    make defconfig
    
    echo 'Make Clean'
    make clean
    
    echo 'Make download'
    make download -j1
    echo 'Compile firmware'
    echo -e "$(nproc) thread compile"
    # 设置为非root用户编译FORCE_UNSAFE_CONFIGURE=1
    make FORCE_UNSAFE_CONFIGURE=1 -j$(nproc) || make -j1
    # 保存编译后固件（编译后文件放置在bin目录下）
    echo 'Assemble artifact'
    # 设置时间标号
    export BuildDate="`date   +%Y%m%d`"
    echo $BuildDate
    ## config
    cp /builds/shihuang/routerbuild/lede/.config /builds/shihuang/routerbuild/bin/.config
    ## friendlyarm_nanopi_r4s
    #cp /builds/shihuang/routerbuild/lede/bin/targets/rockchip/armv8/openwrt-rockchip-armv8-friendlyarm_nanopi-r4s-ext4-sysupgrade.img.gz /builds/shihuang/routerbuild/bin/`date   +%Y%m%d`-$CI_JOB_ID-openwrt-rockchip-armv8-friendlyarm_nanopi-r4s-ext4-sysupgrade.img.gz
    cp /builds/shihuang/routerbuild/lede/bin/targets/rockchip/armv8/openwrt-rockchip-armv8-friendlyarm_nanopi-r4s-squashfs-sysupgrade.img.gz /builds/shihuang/routerbuild/bin/$BuildDate-$CI_JOB_ID-openwrt-rockchip-armv8-friendlyarm_nanopi-r4s-squashfs-sysupgrade.img.gz
    ## remove git file
    cd /builds/shihuang/routerbuild/bin
    rm .gitignore
    # 上传与发布
    ## 上传
    ### 上传到CowTransfer奶牛快传
    ### echo 'Upload Firmware To CowTransfer'
    ### cd /builds/shihuang/routerbuild/transfer
    ### curl -sL https://git.io/file-transfer | bash -s beta
    ### ./transfer cow --block 2621440 -s -p 99 -t 15 --hash --no-progress /builds/shihuang/routerbuild/bin 2>&1 | tee cowtransfer.log
    ####- echo "::warning file=cowtransfer.com::$(cat cowtransfer.log | grep https)"
    ####- echo "::set-env name=COWTRANSFER_URL::$(cat cowtransfer.log | grep https | cut -f3 -d" ")"
    ####- echo $COWTRANSFER_URL
    ###export COWTRANSFER_URL=$(cat cowtransfer.log | grep https | cut -f3 -d" ")
    ###echo $COWTRANSFER_URL
    #### 上传到七牛云
    #echo 'Upload Firmware To Qiniu'
    #cd /builds/shihuang/routerbuild/qiniu
    ##### https://devtools.qiniu.com/qshell-v2.6.2-linux-amd64.tar.gz
    #chmod +x qshell
    #./qshell account $qAK $qSK qiniu --overwrite
    ###### squashfs-sysupgrade.img.gz
    #./qshell fput staticdownload openwrt-rockchip-armv8-friendlyarm_nanopi-r4s-squashfs-sysupgrade.img.gz /builds/shihuang/routerbuild/bin/$BuildDate-$CI_JOB_ID-openwrt-rockchip-armv8-friendlyarm_nanopi-r4s-squashfs-sysupgrade.img.gz --overwrite
    ###### .config
    #./qshell fput staticdownload r4s.config /builds/shihuang/routerbuild/bin/.config --overwrite
    # 发布release
    echo 'Release R4S'
    curl --header 'Content-Type: application/json' --header "PRIVATE-TOKEN: $user_token" --data '{ "name": "'"$BuildDate"'-R4S-'"$CI_JOB_ID"'-snapshot", "tag_name": "CI-'"$CI_JOB_ID"'", "ref": "'"$CI_COMMIT_BRANCH"'", "description": "说明：<br />固件介绍页面：[https://www.qyh.name/807/](https://www.qyh.name/807/)<br />默认管理地址：192.168.2.1<br />默认账号：root<br />默认密码：password<br />默认主题：argon<br /><br />img.gz格式文件直接使用，无需解压。如果下载的扩展名是zip需要解压，里面img.gz是固件。<br />将固件img.gz使用烧录工具烧录或者在路由器网页管理后台直接上传升级使用<br />管理后台升级仅限于之前曾经使用在本处编译的固件并且并非大版本之间更新，大版本更新可能会清除所有配置信息或者请直接烧录重置全部数据。<br /><br />烧录工具下载：<br />[balenaEtcher](https://www.balena.io/etcher/)<br /><br />固件下载地址：<br />🔗[本地下载（内网用户）](http://192.168.2.100:800/shihuang/routerbuild/-/jobs/'"$CI_JOB_ID"'/artifacts/download)<br />【说明】链接有效期为编译成功后6个月，仅限内网用户使用，外网用户建议使用下面的其他外链地址下载。<br /><br />🔗[本地下载（外网用户）](http://git.qyh.name/shihuang/routerbuild/-/jobs/'"$CI_JOB_ID"'/artifacts/download)<br />【说明】链接有效期为编译成功后6个月，下载限速，可能下载缓慢或出现中断，不推荐外网用户使用，外网用户建议使用下面的其他外链地址下载。<br /><br /><br />🔗[七牛云(固件)](http://down.cdn.qyh0214.com/openwrt-rockchip-armv8-friendlyarm_nanopi-r4s-squashfs-sysupgrade.img.gz)<br />【说明】链接有效期为长期，在每次编译成功后即覆盖为新版本。<br />🔗[七牛云(固件CI配置文件config)](http://down.cdn.qyh0214.com/r4s.config)<br />【说明】链接有效期为长期，在每次编译成功后即覆盖为新版本。此文件主要用于开发者使用，一般无需下载。<br />"}' --request POST http://git.qyh.name/api/v4/projects/41/releases
 
  artifacts:
    #`date   +%Y%m%d`-$CI_JOB_ID-openwrt-router-r4s
    name: "$CI_JOB_ID-openwrt-router-r4s"
    expire_in: 6 months
    paths:
      - /builds/shihuang/routerbuild/bin
  # disable artifact passing
  dependencies: []
